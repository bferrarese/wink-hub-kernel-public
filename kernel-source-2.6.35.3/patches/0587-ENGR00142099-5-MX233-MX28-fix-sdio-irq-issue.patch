From 2442c69bc4faa014ed253f54027a46b9f1d82e04 Mon Sep 17 00:00:00 2001
From: Tony Lin <tony.lin@freescale.com>
Date: Tue, 21 Jun 2011 13:37:50 +0800
Subject: [PATCH 587/670] ENGR00142099-5 [MX233/MX28]fix sdio irq issue

in polling mode we will clear SDIO irq by mistake
this will sometimes lose SDIO irq.
in irq handler we will duplicately report SDIO irq
sometimes.
this patch will fix these issues.

Signed-off-by: Tony Lin <tony.lin@freescale.com>
---
 drivers/mmc/host/mxs-mmc.c | 23 +++++++++++++++--------
 1 file changed, 15 insertions(+), 8 deletions(-)

diff --git a/drivers/mmc/host/mxs-mmc.c b/drivers/mmc/host/mxs-mmc.c
index 1bf5b4f..d6f20f3 100644
--- a/drivers/mmc/host/mxs-mmc.c
+++ b/drivers/mmc/host/mxs-mmc.c
@@ -182,8 +182,7 @@ static void mxs_mmc_detect_poll(unsigned long arg)
 	mod_timer(&host->timer, jiffies + MXS_MMC_DETECT_TIMEOUT);
 }
 
-#define MXS_MMC_IRQ_BITS  (BM_SSP_CTRL1_SDIO_IRQ		| \
-				BM_SSP_CTRL1_RESP_ERR_IRQ	| \
+#define MXS_MMC_ERR_IRQ_BITS  (BM_SSP_CTRL1_RESP_ERR_IRQ	| \
 				BM_SSP_CTRL1_RESP_TIMEOUT_IRQ	| \
 				BM_SSP_CTRL1_DATA_TIMEOUT_IRQ	| \
 				BM_SSP_CTRL1_DATA_CRC_IRQ	| \
@@ -191,6 +190,9 @@ static void mxs_mmc_detect_poll(unsigned long arg)
 				BM_SSP_CTRL1_RECV_TIMEOUT_IRQ   | \
 				BM_SSP_CTRL1_FIFO_OVERRUN_IRQ)
 
+#define MXS_MMC_IRQ_BITS  (BM_SSP_CTRL1_SDIO_IRQ		| \
+				MXS_MMC_ERR_IRQ_BITS)
+
 #define MXS_MMC_ERR_BITS (BM_SSP_CTRL1_RESP_ERR_IRQ       | \
 				BM_SSP_CTRL1_RESP_TIMEOUT_IRQ   | \
 				BM_SSP_CTRL1_DATA_TIMEOUT_IRQ   | \
@@ -205,8 +207,12 @@ static irqreturn_t mmc_irq_handler(int irq, void *dev_id)
 	LIST_HEAD(list);
 
 	c1 = __raw_readl(host->ssp_base + HW_SSP_CTRL1);
-	__raw_writel(c1 & MXS_MMC_IRQ_BITS,
-			host->ssp_base + HW_SSP_CTRL1_CLR);
+	if (irq == host->dmairq)
+		__raw_writel(c1 & MXS_MMC_ERR_IRQ_BITS,
+				host->ssp_base + HW_SSP_CTRL1_CLR);
+	else
+		__raw_writel(c1 & MXS_MMC_IRQ_BITS,
+				host->ssp_base + HW_SSP_CTRL1_CLR);
 	if (irq == host->dmairq) {
 		dev_dbg(host->dev, "dma irq 0x%x and stop DMA.\n", irq);
 		mxs_dma_ack_irq(host->dmach);
@@ -222,7 +228,8 @@ static irqreturn_t mmc_irq_handler(int irq, void *dev_id)
 		}
 
 	if ((c1 & BM_SSP_CTRL1_SDIO_IRQ) && (c1 & BM_SSP_CTRL1_SDIO_IRQ_EN))
-		mmc_signal_sdio_irq(host->mmc);
+		if (irq == host->errirq)
+			mmc_signal_sdio_irq(host->mmc);
 
 	return IRQ_HANDLED;
 }
@@ -293,7 +300,7 @@ static void mxs_mmc_bc(struct mxs_mmc_host *host)
 	host->status =
 		__raw_readl(host->ssp_base + HW_SSP_STATUS);
 	c1 = __raw_readl(host->ssp_base + HW_SSP_CTRL1);
-	__raw_writel(c1 & MXS_MMC_IRQ_BITS,
+	__raw_writel(c1 & MXS_MMC_ERR_IRQ_BITS,
 			host->ssp_base + HW_SSP_CTRL1_CLR);
 	/* reenable these bits */
 	__raw_writel(ssp_ctrl1, host->ssp_base + HW_SSP_CTRL1_SET);
@@ -359,7 +366,7 @@ static void mxs_mmc_ac(struct mxs_mmc_host *host)
 	host->status =
 		__raw_readl(host->ssp_base + HW_SSP_STATUS);
 	c1 = __raw_readl(host->ssp_base + HW_SSP_CTRL1);
-	__raw_writel(c1 & MXS_MMC_IRQ_BITS,
+	__raw_writel(c1 & MXS_MMC_ERR_IRQ_BITS,
 			host->ssp_base + HW_SSP_CTRL1_CLR);
 	/* reenable these bits */
 	__raw_writel(ssp_ctrl1, host->ssp_base + HW_SSP_CTRL1_SET);
@@ -826,7 +833,7 @@ skip_dma_setup1:
 		host->status =
 			__raw_readl(host->ssp_base + HW_SSP_STATUS);
 		c1 = __raw_readl(host->ssp_base + HW_SSP_CTRL1);
-		__raw_writel(c1 & MXS_MMC_IRQ_BITS,
+		__raw_writel(c1 & MXS_MMC_ERR_IRQ_BITS,
 			host->ssp_base + HW_SSP_CTRL1_CLR);
 		/* reenable these bits */
 		__raw_writel(ssp_ctrl1, host->ssp_base + HW_SSP_CTRL1_SET);
-- 
1.8.0

