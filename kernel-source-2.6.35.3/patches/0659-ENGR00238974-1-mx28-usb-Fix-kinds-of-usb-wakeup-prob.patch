From fae82b408c18016ea19bbfbb55b8211a19fd61ac Mon Sep 17 00:00:00 2001
From: Peter Chen <peter.chen@freescale.com>
Date: Tue, 8 Jan 2013 10:10:02 +0800
Subject: [PATCH 659/670] ENGR00238974-1: mx28-usb: Fix kinds of usb wakeup
 problems

This is for MSL part

- Add correct suspend/resume procedures
- Add solutions for IC limitations during usb suspend/resume
- More USB wakeup functions are tested
- Only build-in driver usb function are tested

Signed-off-by: Peter Chen <peter.chen@freescale.com>
---
 arch/arm/mach-mx28/usb_dr.c    | 149 +++++++++++++++++++++++++++++++----------
 arch/arm/mach-mx28/usb_h1.c    | 149 +++++++++++++++++++++++++++++++----------
 arch/arm/plat-mxs/usb_common.c |   9 ++-
 arch/arm/plat-mxs/usb_wakeup.c |   8 +++
 4 files changed, 240 insertions(+), 75 deletions(-)

diff --git a/arch/arm/mach-mx28/usb_dr.c b/arch/arm/mach-mx28/usb_dr.c
index ce31e6b..6fe8a01 100644
--- a/arch/arm/mach-mx28/usb_dr.c
+++ b/arch/arm/mach-mx28/usb_dr.c
@@ -68,33 +68,15 @@ void fsl_phy_set_power(struct fsl_xcvr_ops *this,
 	}
 }
 
-static void usb_host_phy_resume(struct fsl_usb2_platform_data *plat)
-{
-	fsl_platform_set_usb_phy_dis(plat, 0);
-}
-
-static int internal_phy_clk_already_on;
 static void usbotg_internal_phy_clock_gate(bool on)
 {
-	u32 tmp;
 	void __iomem *phy_reg = IO_ADDRESS(USBPHY0_PHYS_ADDR);
-	if (on) {
-		internal_phy_clk_already_on += 1;
-		if (internal_phy_clk_already_on == 1) {
-			pr_debug ("%s, Clock on UTMI \n", __func__);
-			tmp = BM_USBPHY_CTRL_SFTRST | BM_USBPHY_CTRL_CLKGATE;
-			__raw_writel(tmp, phy_reg + HW_USBPHY_CTRL_CLR);
-		}
-	} else {
-		internal_phy_clk_already_on -= 1;
-		if (internal_phy_clk_already_on == 0) {
-			pr_debug ("%s, Clock off UTMI \n", __func__);
-			tmp = BM_USBPHY_CTRL_CLKGATE;
-			__raw_writel(tmp, phy_reg + HW_USBPHY_CTRL_SET);
-		}
-	}
-	if (internal_phy_clk_already_on < 0)
-		printk(KERN_ERR "please check internal phy clock ON/OFF sequence \n");
+	pr_debug ("%s, Clock %s UTMI \n", __func__, on ? "on" : "off");
+
+	if (on)
+		__raw_writel(BM_USBPHY_CTRL_CLKGATE, phy_reg + HW_USBPHY_CTRL_CLR);
+	else
+		__raw_writel(BM_USBPHY_CTRL_CLKGATE, phy_reg + HW_USBPHY_CTRL_SET);
 }
 
 static int usbotg_init_ext(struct platform_device *pdev)
@@ -126,9 +108,7 @@ static void usbotg_clock_gate(bool on)
 	if (on) {
 		clk_enable(usb_clk);
 		clk_enable(usb_phy_clk);
-		usbotg_internal_phy_clock_gate(on);
 	} else {
-		usbotg_internal_phy_clock_gate(on);
 		clk_disable(usb_phy_clk);
 		clk_disable(usb_clk);
 	}
@@ -163,10 +143,17 @@ static void enter_phy_lowpower_suspend(struct fsl_usb2_platform_data *pdata, boo
 			| BM_USBPHY_PWD_RXPWDRX);
 		__raw_writel(tmp, phy_reg + HW_USBPHY_PWD_SET);
 
-		pr_debug ("%s, Polling UTMI enter suspend \n", __func__);
-		while (tmp & BM_USBPHY_CTRL_UTMI_SUSPENDM)
-			tmp = __raw_readl(phy_reg + HW_USBPHY_CTRL);
+		usbotg_internal_phy_clock_gate(false);
 	} else {
+		tmp = __raw_readl(usb_reg + UOG_PORTSC1);
+		if (tmp & PORTSC_PHCD) {
+			tmp &= ~PORTSC_PHCD;
+			fsl_safe_writel(tmp, usb_reg + UOG_PORTSC1);
+			mdelay(1);
+		}
+
+		usbotg_internal_phy_clock_gate(true);
+
 		tmp = (BM_USBPHY_PWD_TXPWDFS
 			| BM_USBPHY_PWD_TXPWDIBIAS
 			| BM_USBPHY_PWD_TXPWDV2I
@@ -175,10 +162,6 @@ static void enter_phy_lowpower_suspend(struct fsl_usb2_platform_data *pdata, boo
 			| BM_USBPHY_PWD_RXPWDDIFF
 			| BM_USBPHY_PWD_RXPWDRX);
 		__raw_writel(tmp, phy_reg + HW_USBPHY_PWD_CLR);
-
-		tmp = __raw_readl(usb_reg + UOG_PORTSC1);
-		tmp &= ~PORTSC_PHCD;
-		fsl_safe_writel(tmp, usb_reg + UOG_PORTSC1);
 	}
 }
 
@@ -266,7 +249,6 @@ static void usbotg_wakeup_event_clear(void)
 
 
 #ifdef CONFIG_USB_EHCI_ARC_OTG
-extern void fsl_usb_recover_hcd(struct platform_device *pdev);
 /* Beginning of host related operation for DR port */
 static void _host_phy_lowpower_suspend(struct fsl_usb2_platform_data *pdata, bool enable)
 {
@@ -324,10 +306,100 @@ static enum usb_wakeup_event _is_host_wakeup(struct fsl_usb2_platform_data *pdat
 
 static void host_wakeup_handler(struct fsl_usb2_platform_data *pdata)
 {
-	_host_wakeup_enable(pdata, false);
 	_host_phy_lowpower_suspend(pdata, false);
-	fsl_usb_recover_hcd(otg_host_pdev);
+	_host_wakeup_enable(pdata, false);
+}
+
+static void fsl_platform_otg_set_usb_phy_dis(
+		struct fsl_usb2_platform_data *pdata, bool enable)
+{
+	u32 usb_phy_ctrl_dcdt = 0;
+	usb_phy_ctrl_dcdt = __raw_readl(
+			IO_ADDRESS(pdata->phy_regs) + HW_USBPHY_CTRL) &
+			BM_USBPHY_CTRL_ENHOSTDISCONDETECT;
+	if (enable) {
+		if (usb_phy_ctrl_dcdt == 0) {
+			__raw_writel(BM_USBPHY_CTRL_ENHOSTDISCONDETECT,
+				IO_ADDRESS(pdata->phy_regs)
+				+ HW_USBPHY_CTRL_SET);
+		}
+	} else {
+		if (usb_phy_ctrl_dcdt
+				== BM_USBPHY_CTRL_ENHOSTDISCONDETECT)
+			__raw_writel(BM_USBPHY_CTRL_ENHOSTDISCONDETECT,
+				IO_ADDRESS(pdata->phy_regs)
+				+ HW_USBPHY_CTRL_CLR);
+	}
+}
+
+static void usb_host_phy_suspend(struct fsl_usb2_platform_data *pdata)
+{
+	void __iomem *phy_reg = IO_ADDRESS(pdata->phy_regs);
+	void __iomem *usb_reg = pdata->regs;
+	u32 tmp;
+	u32 index = 0;
+	tmp = __raw_readl(usb_reg + UOG_PORTSC1);
+
+	/* before we set and then clear PWD bit,
+	 * we must wait LS to be J */
+	if ((tmp & (3 << 26)) != (1 << 26)) {
+		while (((tmp & PORTSC_LS_MASK) != PORTSC_LS_J_STATE) &&
+				(index < 4)) {
+			index++;
+			msleep(1);
+			tmp = __raw_readl(usb_reg + UOG_PORTSC1);
+		}
+	} else {
+		while (((tmp & PORTSC_LS_MASK) != PORTSC_LS_K_STATE) &&
+				(index < 4)) {
+			index++;
+			msleep(1);
+			tmp = __raw_readl(usb_reg + UOG_PORTSC1);
+		}
+	}
+
+	if (index >= 4)
+		printk(KERN_INFO "%s big error\n", __func__);
+
+	tmp = (BM_USBPHY_PWD_TXPWDFS
+		| BM_USBPHY_PWD_TXPWDIBIAS
+		| BM_USBPHY_PWD_TXPWDV2I
+		| BM_USBPHY_PWD_RXPWDENV
+		| BM_USBPHY_PWD_RXPWD1PT1
+		| BM_USBPHY_PWD_RXPWDDIFF
+		| BM_USBPHY_PWD_RXPWDRX);
+	__raw_writel(tmp, phy_reg + HW_USBPHY_PWD_SET);
+
+	__raw_writel(tmp, phy_reg + HW_USBPHY_PWD_CLR);
+
+	fsl_platform_otg_set_usb_phy_dis(pdata, 0);
 }
+
+static void usb_host_phy_resume(struct fsl_usb2_platform_data *pdata)
+{
+	u32 index = 0;
+	u32 tmp;
+	void __iomem *usb_reg = pdata->regs;
+	tmp = __raw_readl(usb_reg + UOG_PORTSC1);
+
+	if ((tmp & (3 << 26)) != (2 << 26))
+		return ;
+
+	while ((tmp & PORTSC_PORT_FORCE_RESUME)
+			&& (index < 500)) {
+		msleep(1);
+		index++;
+		tmp = __raw_readl(usb_reg + UOG_PORTSC1);
+	}
+
+	if (index >= 500)
+		printk(KERN_ERR "%s big error\n", __func__);
+
+	udelay(500);
+
+	fsl_platform_otg_set_usb_phy_dis(pdata, 1);
+}
+
 /* End of host related operation for DR port */
 #endif /* CONFIG_USB_EHCI_ARC_OTG */
 
@@ -386,8 +458,8 @@ static enum usb_wakeup_event _is_device_wakeup(struct fsl_usb2_platform_data *pd
 
 static void device_wakeup_handler(struct fsl_usb2_platform_data *pdata)
 {
-	_device_wakeup_enable(pdata, false);
 	_device_phy_lowpower_suspend(pdata, false);
+	_device_wakeup_enable(pdata, false);
 }
 
 /* end of device related operation for DR port */
@@ -405,7 +477,10 @@ static struct fsl_usb2_platform_data __maybe_unused dr_utmi_config = {
 	.usb_clock_for_pm  = usbotg_clock_gate,
 	.phy_mode          = FSL_USB2_PHY_UTMI_WIDE,
 	.power_budget      = 500,	/* 500 mA max power */
+#ifdef CONFIG_USB_EHCI_ARC_OTG
 	.platform_resume = usb_host_phy_resume,
+	.platform_suspend = usb_host_phy_suspend,
+#endif
 	.transceiver       = "utmi",
 	.phy_regs          = USBPHY0_PHYS_ADDR,
 };
diff --git a/arch/arm/mach-mx28/usb_h1.c b/arch/arm/mach-mx28/usb_h1.c
index 04b8969..314eca1 100644
--- a/arch/arm/mach-mx28/usb_h1.c
+++ b/arch/arm/mach-mx28/usb_h1.c
@@ -30,17 +30,10 @@
 #include "usb.h"
 
 extern int clk_get_usecount(struct clk *clk);
-extern void fsl_usb_recover_hcd(struct platform_device *pdev);
 static struct clk *usb_clk;
 static struct clk *usb_phy_clk;
 static struct platform_device *h1_pdev;
 
-static void usb_host_phy_resume(struct fsl_usb2_platform_data *plat)
-{
-	fsl_platform_set_usb_phy_dis(plat, 0);
-}
-
-static int internal_phy_clk_already_on;
 #ifdef CONFIG_WORKAROUND_ARCUSB_REG_RW
 static void fsl_safe_writel(u32 val32, volatile u32 *addr)
 {
@@ -49,26 +42,16 @@ static void fsl_safe_writel(u32 val32, volatile u32 *addr)
 #endif
 static void usbh1_internal_phy_clock_gate(bool on)
 {
-	u32 tmp;
 	void __iomem *phy_reg = IO_ADDRESS(USBPHY1_PHYS_ADDR);
-	if (on) {
-		internal_phy_clk_already_on += 1;
-		if (internal_phy_clk_already_on == 1) {
-			pr_debug ("%s, Clock on UTMI \n", __func__);
-			tmp = BM_USBPHY_CTRL_SFTRST | BM_USBPHY_CTRL_CLKGATE;
-			__raw_writel(tmp, phy_reg + HW_USBPHY_CTRL_CLR);
-		}
-	} else {
-		internal_phy_clk_already_on -= 1;
-		if (internal_phy_clk_already_on == 0) {
-			pr_debug ("%s, Clock off UTMI \n", __func__);
-			tmp = BM_USBPHY_CTRL_CLKGATE;
-			__raw_writel(tmp, phy_reg + HW_USBPHY_CTRL_SET);
-		}
-	}
-	if (internal_phy_clk_already_on < 0)
-		printk(KERN_ERR "please check internal phy clock ON/OFF sequence \n");
+
+	pr_debug ("%s, Clock %s UTMI \n", __func__, on ? "on" : "off");
+
+	if (on)
+		__raw_writel(BM_USBPHY_CTRL_CLKGATE, phy_reg + HW_USBPHY_CTRL_CLR);
+	else
+		__raw_writel(BM_USBPHY_CTRL_CLKGATE, phy_reg + HW_USBPHY_CTRL_SET);
 }
+
 static int fsl_usb_host_init_ext(struct platform_device *pdev)
 {
 	usb_clk = clk_get(NULL, "usb_clk1");
@@ -97,9 +80,7 @@ static void usbh1_clock_gate(bool on)
 	if (on) {
 		clk_enable(usb_clk);
 		clk_enable(usb_phy_clk);
-		usbh1_internal_phy_clock_gate(on);
 	} else {
-		usbh1_internal_phy_clock_gate(on);
 		clk_disable(usb_phy_clk);
 		clk_disable(usb_clk);
 	}
@@ -157,10 +138,17 @@ static void _phy_lowpower_suspend(struct fsl_usb2_platform_data *pdata, bool ena
 			| BM_USBPHY_PWD_RXPWDRX);
 		__raw_writel(tmp, phy_reg + HW_USBPHY_PWD_SET);
 
-		pr_debug ("%s, Polling UTMI enter suspend \n", __func__);
-		while (tmp & BM_USBPHY_CTRL_UTMI_SUSPENDM)
-			tmp = __raw_readl(phy_reg + HW_USBPHY_CTRL);
+		usbh1_internal_phy_clock_gate(false);
 	} else {
+		tmp = __raw_readl(usb_reg + UOG_PORTSC1);
+		if (tmp & PORTSC_PHCD) {
+			tmp &= ~PORTSC_PHCD;
+			fsl_safe_writel(tmp, usb_reg + UOG_PORTSC1);
+			mdelay(1);
+		}
+
+		usbh1_internal_phy_clock_gate(true);
+
 		tmp = (BM_USBPHY_PWD_TXPWDFS
 			| BM_USBPHY_PWD_TXPWDIBIAS
 			| BM_USBPHY_PWD_TXPWDV2I
@@ -169,10 +157,6 @@ static void _phy_lowpower_suspend(struct fsl_usb2_platform_data *pdata, bool ena
 			| BM_USBPHY_PWD_RXPWDDIFF
 			| BM_USBPHY_PWD_RXPWDRX);
 		__raw_writel(tmp, phy_reg + HW_USBPHY_PWD_CLR);
-
-		tmp = __raw_readl(usb_reg + UOG_PORTSC1);
-		tmp &= ~PORTSC_PHCD;
-		fsl_safe_writel(tmp, usb_reg + UOG_PORTSC1);
 	}
 }
 
@@ -185,16 +169,15 @@ static enum usb_wakeup_event _is_usbh1_wakeup(struct fsl_usb2_platform_data *pda
 	tmp = BM_USBPHY_CTRL_RESUME_IRQ | BM_USBPHY_CTRL_WAKEUP_IRQ;
 	if (__raw_readl(phy_reg + HW_USBPHY_CTRL) && tmp) {
 		__raw_writel(tmp, phy_reg + HW_USBPHY_CTRL_CLR);
-		return !WAKEUP_EVENT_INVALID;
+		return WAKEUP_EVENT_DPDM;
 	} else
 		return WAKEUP_EVENT_INVALID;
 }
 
 static void h1_wakeup_handler(struct fsl_usb2_platform_data *pdata)
 {
-	_wake_up_enable(pdata, false);
 	_phy_lowpower_suspend(pdata, false);
-	fsl_usb_recover_hcd(h1_pdev);
+	_wake_up_enable(pdata, false);
 }
 
 static void usbh1_wakeup_event_clear(void)
@@ -208,6 +191,97 @@ static void usbh1_wakeup_event_clear(void)
 		__raw_writel(wakeup_irq_bits, phy_reg + HW_USBPHY_CTRL_CLR);
 	}
 }
+
+static void fsl_platform_h1_set_usb_phy_dis(
+		struct fsl_usb2_platform_data *pdata, bool enable)
+{
+	u32 usb_phy_ctrl_dcdt = 0;
+	usb_phy_ctrl_dcdt = __raw_readl(
+			IO_ADDRESS(pdata->phy_regs) + HW_USBPHY_CTRL) &
+			BM_USBPHY_CTRL_ENHOSTDISCONDETECT;
+	if (enable) {
+		if (usb_phy_ctrl_dcdt == 0) {
+			__raw_writel(BM_USBPHY_CTRL_ENHOSTDISCONDETECT,
+				IO_ADDRESS(pdata->phy_regs)
+				+ HW_USBPHY_CTRL_SET);
+		}
+	} else {
+		if (usb_phy_ctrl_dcdt
+				== BM_USBPHY_CTRL_ENHOSTDISCONDETECT)
+			__raw_writel(BM_USBPHY_CTRL_ENHOSTDISCONDETECT,
+				IO_ADDRESS(pdata->phy_regs)
+				+ HW_USBPHY_CTRL_CLR);
+	}
+}
+
+static void usb_host_phy_suspend(struct fsl_usb2_platform_data *pdata)
+{
+	void __iomem *phy_reg = IO_ADDRESS(USBPHY1_PHYS_ADDR);
+	void __iomem *usb_reg = pdata->regs;
+	u32 tmp;
+	u32 index = 0;
+	tmp = __raw_readl(usb_reg + UOG_PORTSC1);
+
+	/* before we set and then clear PWD bit,
+	 * we must wait LS to be J */
+	if ((tmp & (3 << 26)) != (1 << 26)) {
+		while (((tmp & PORTSC_LS_MASK) != PORTSC_LS_J_STATE) &&
+				(index < 4)) {
+			index++;
+			msleep(1);
+			tmp = __raw_readl(usb_reg + UOG_PORTSC1);
+		}
+	} else {
+		while (((tmp & PORTSC_LS_MASK) != PORTSC_LS_K_STATE) &&
+				(index < 4)) {
+			index++;
+			msleep(1);
+			tmp = __raw_readl(usb_reg + UOG_PORTSC1);
+		}
+	}
+
+	if (index >= 4)
+		printk(KERN_INFO "%s big error\n", __func__);
+
+	tmp = (BM_USBPHY_PWD_TXPWDFS
+		| BM_USBPHY_PWD_TXPWDIBIAS
+		| BM_USBPHY_PWD_TXPWDV2I
+		| BM_USBPHY_PWD_RXPWDENV
+		| BM_USBPHY_PWD_RXPWD1PT1
+		| BM_USBPHY_PWD_RXPWDDIFF
+		| BM_USBPHY_PWD_RXPWDRX);
+	__raw_writel(tmp, phy_reg + HW_USBPHY_PWD_SET);
+
+	__raw_writel(tmp, phy_reg + HW_USBPHY_PWD_CLR);
+
+	fsl_platform_h1_set_usb_phy_dis(pdata, 0);
+}
+
+static void usb_host_phy_resume(struct fsl_usb2_platform_data *pdata)
+{
+	u32 index = 0;
+	u32 tmp;
+	void __iomem *usb_reg = pdata->regs;
+	tmp = __raw_readl(usb_reg + UOG_PORTSC1);
+
+	if ((tmp & (3 << 26)) != (2 << 26))
+		return ;
+
+	while ((tmp & PORTSC_PORT_FORCE_RESUME)
+			&& (index < 500)) {
+		msleep(1);
+		index++;
+		tmp = __raw_readl(usb_reg + UOG_PORTSC1);
+	}
+
+	if (index >= 500)
+		printk(KERN_ERR "%s big error\n", __func__);
+
+	udelay(500);
+
+	fsl_platform_h1_set_usb_phy_dis(pdata, 1);
+}
+
 static struct fsl_usb2_platform_data usbh1_config = {
 	.name = "Host 1",
 	.platform_init = fsl_usb_host_init_ext,
@@ -215,6 +289,7 @@ static struct fsl_usb2_platform_data usbh1_config = {
 	.operating_mode = FSL_USB2_MPH_HOST,
 	.phy_mode = FSL_USB2_PHY_UTMI_WIDE,
 	.power_budget = 500,	/* 500 mA max power */
+	.platform_suspend = usb_host_phy_suspend,
 	.platform_resume = usb_host_phy_resume,
 	.transceiver = "utmi",
 	.usb_clock_for_pm  = usbh1_clock_gate,
diff --git a/arch/arm/plat-mxs/usb_common.c b/arch/arm/plat-mxs/usb_common.c
index d3d53d5..46a4b1d 100644
--- a/arch/arm/plat-mxs/usb_common.c
+++ b/arch/arm/plat-mxs/usb_common.c
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2009-2012 Freescale Semiconductor, Inc. All Rights Reserved.
+ * Copyright (C) 2009-2013 Freescale Semiconductor, Inc. All Rights Reserved.
  *
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
@@ -279,6 +279,13 @@ int usb_phy_enable(struct fsl_usb2_platform_data *pdata)
 	/* Power up the PHY */
 	__raw_writel(0, phy_reg + HW_USBPHY_PWD);
 
+	__raw_writel(BM_USBPHY_CTRL_ENAUTOSET_USBCLKS
+		| BM_USBPHY_CTRL_ENAUTOCLR_PHY_PWD
+		| BM_USBPHY_CTRL_ENAUTOCLR_CLKGATE
+		| BM_USBPHY_CTRL_ENAUTOCLR_USBCLKGATE
+		| BM_USBPHY_CTRL_ENAUTO_PWRON_PLL,
+		phy_reg + HW_USBPHY_CTRL_SET);
+
 	return 0;
 }
 EXPORT_SYMBOL(usb_phy_enable);
diff --git a/arch/arm/plat-mxs/usb_wakeup.c b/arch/arm/plat-mxs/usb_wakeup.c
index 7a775fd..79636a4 100644
--- a/arch/arm/plat-mxs/usb_wakeup.c
+++ b/arch/arm/plat-mxs/usb_wakeup.c
@@ -60,10 +60,16 @@ static bool usb2_is_in_lowpower(struct wakeup_ctrl *ctrl)
 static void delay_process_wakeup(struct wakeup_ctrl *ctrl)
 {
 	struct fsl_usb2_wakeup_platform_data *pdata = ctrl->pdata;
+	int i;
 	disable_irq_nosync(ctrl->wakeup_irq);
 	if ((ctrl->usb_irq > 0) && (ctrl->wakeup_irq != ctrl->usb_irq))
 		disable_irq_nosync(ctrl->usb_irq);
 
+	for (i = 0; i < 3; i++) {
+		if (pdata->usb_pdata[i])
+			pdata->usb_pdata[i]->irq_delay = 1;
+	}
+
 	pdata->usb_wakeup_is_pending = true;
 	complete(&ctrl->event);
 }
@@ -105,7 +111,9 @@ static void wakeup_event_handler(struct wakeup_ctrl *ctrl)
 	for (i = 0; i < 3; i++) {
 		struct fsl_usb2_platform_data *usb_pdata = pdata->usb_pdata[i];
 		if (usb_pdata) {
+			usb_pdata->irq_delay = 0;
 			wakeup_evt = is_wakeup(usb_pdata);
+			usb_pdata->wakeup_event = wakeup_evt;
 			if (wakeup_evt != WAKEUP_EVENT_INVALID) {
 				if (usb2_is_in_lowpower(ctrl))
 					if (usb_pdata->usb_clock_for_pm)
-- 
1.8.0

